#include <xinu.h>
#include <mutex.h>

void    produce(void), consume(void);

sid32 sem;
sid32 mutex = mutex_init;
int32 n = 0;    /* Global variables are shared by all processes */

/*----------------------------------------------------------------------------
 * main    - Example of unsynchronized producer and consumer processes
 *---------------------------------------------------------------------------- 
 */
void productor_consumidor(void)
{
    sem = semcreate(1);
    resume( create(consume, 1024, 20, "cons", 0) );
    resume( create(produce, 1024, 20, "prod", 0) );
}

/*----------------------------------------------------------------------------
 * produce - Increment n 2000 times and exit
 *----------------------------------------------------------------------------
 */
void produce(void)
{
    int32 i;

    for (i = 1; i <= 2000; i++) {
        mutex_lock(mutex);
        n++;
        mutex_unlock(mutex);
    }
}

/*----------------------------------------------------------------------------
 * consume - Print n 2000 times and exit
 *----------------------------------------------------------------------------
 */
void consume(void)
{
    int32 i;

    for (i = 1; i <= 2000; i++){
        printf("The value of n is %d \n", n);
    }
}

/*
Implementar la operación primerCaminoPesoMenor(vertA, vertB, pesoMax) que recibe 
dos elementos de tipo vértice (object) y una cantidad numérica y devuelve el 
primer camino sin ciclos encontrado entre A y B con peso < pesoMax. 
RECUERDE RECORRER LA ESTRUCTURA LO MENOS POSIBLE
*/

private NodoVert ubicarVertice(Object elem){
    NodoVert buscado = null;

    if(inicio != null){
        
        NodoVert recorre = inicio;
        
        while(recorre != null && buscado == null){
            if(recorre.getElem().equals(elem)){
                buscado = recorre;
            }
            else{
                recorre = recorre.getSigVertice();
            }
        }
    }

    return buscado;
}

public Lista primerCaminoPesoMenor(Object vertA, Object vertB, int pesoMax){

    Lista camino = new Lista(), actual = new Lista();
    boolean[] seguir = new boolean[1];
    seguir[0] = true;
    NodoVert origen = ubicarVertice(vertA);
    NodoVert destino = ubicarVertice(vertB);

    if(origen != null && destino != null){
        caminoAux(camino, actual, origen, destino, pesoMax, 0, seguir);
    }

    return camino;
}

private void caminoAux(Lista camino, Lista actual, NodoVert recorre, NodoVert destino, int pesoMax, int pesoActual, boolean[] seguir){

    actual.insertar(actual.longitud() + 1, recorre);

    if(recorre == destino){
        
        seguir[0] = false;

        int len = actual.longitud(); 
        
        for(int i = 1; i <= len; i++){
            camino.insertar(i, actual.recuperar(1).getElem());
            actual.eliminar(1);
        }
    }
    else{

        NodoAdy adyacente = recorre.getPrimerAdy();

        while(adyacente != null && seguir[0]){
             
            NodoVert siguiente = adyacente.getVertice();
            
            int valor = (int) adyacente.getEtiqueta();
        
            if(siguiente != null && actual.localizar(siguiente.getElem()) < 1 && pesoActual + valor < pesoMax && seguir[0]){
                caminoAux(camino, actual, siguiente, destino, pesoMax, peso, pesoActual + valor, seguir);
            }
            adyacente = adyacente.getSigAdyacente();
        }
    }

    actual.eliminar(actual.longitud());    
}